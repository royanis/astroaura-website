name: Automated Blog Publishing

on:
  schedule:
    # Run daily at midnight UTC (00:00)
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual trigger
    inputs:
      topic:
        description: 'Blog topic (optional - will auto-select if empty)'
        required: false
        default: ''
      force_publish:
        description: 'Force publish even if recently published'
        required: false
        default: 'false'
        type: boolean

jobs:
  generate-and-publish-blog:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd automation
        pip install -r requirements.txt
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Check if should publish
      id: check_publish
      env:
        FORCE_PUBLISH: ${{ github.event.inputs.force_publish }}
      run: |
        cd automation
        SHOULD_PUBLISH="true"
        FORCE_PUBLISH_FLAG="${FORCE_PUBLISH:-false}"
        
        if [ "$FORCE_PUBLISH_FLAG" != "true" ] && [ -f "publisher_config.json" ]; then
          LAST_PUBLISHED=$(python -c "import json; print(json.load(open('publisher_config.json')).get('last_published', ''))" 2>/dev/null || echo "")
          if [ -n "$LAST_PUBLISHED" ]; then
            HOURS_SINCE=$(python -c "import datetime; last=datetime.datetime.fromisoformat('$LAST_PUBLISHED'); now=datetime.datetime.now(); print((now-last).total_seconds()/3600)" 2>/dev/null || echo "25")
            if (( $(echo "$HOURS_SINCE < 20" | bc -l) )); then
              SHOULD_PUBLISH="false"
              echo "Last published $HOURS_SINCE hours ago. Skipping."
            fi
          fi
        fi
        
        echo "SHOULD_PUBLISH=$SHOULD_PUBLISH"
        echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
    
    - name: Generate authentic astrology content
      if: steps.check_publish.outputs.should_publish == 'True'
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        TOPIC: ${{ github.event.inputs.topic }}
      run: |
        cd automation
        python authentic_blog_generator.py --topic "$TOPIC"
    
    - name: Update sitemap and feeds
      if: steps.check_publish.outputs.should_publish == 'True'
      run: |
        cd automation
        python update_sitemap.py
        python rss_generator.py
    
    - name: Commit and push changes
      if: steps.check_publish.outputs.should_publish == 'True'
      run: |
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          COMMIT_MSG="ðŸŒŸ Automated blog post: $(date '+%Y-%m-%d %H:%M UTC')"
          COMMIT_MSG="$COMMIT_MSG"$'\n\n'"Generated authentic astrology content"
          COMMIT_MSG="$COMMIT_MSG"$'\n'"Updated RSS feeds and sitemap"
          COMMIT_MSG="$COMMIT_MSG"$'\n'"Published via GitHub Actions"
          COMMIT_MSG="$COMMIT_MSG"$'\n\n'"ðŸ¤– Automated by AstroAura Blog System"
          git commit -m "$COMMIT_MSG"
          git push
        fi
    
    - name: Update publish statistics
      if: steps.check_publish.outputs.should_publish == 'True'
      run: |
        cd automation
        python -c "import json, datetime; from pathlib import Path; config_file = Path('publisher_config.json'); config = json.load(open(config_file)) if config_file.exists() else {}; config.update({'last_published': datetime.datetime.now().isoformat(), 'total_published': config.get('total_published', 0) + 1, 'last_run_successful': True, 'github_action_runs': config.get('github_action_runs', 0) + 1}); json.dump(config, open(config_file, 'w'), indent=2)"
    
    - name: Deploy to GitHub Pages
      if: steps.check_publish.outputs.should_publish == 'True'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        cname: astroaura.me